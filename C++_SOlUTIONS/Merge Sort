class Solution
{
    public:
    void merge(int arr[], int l, int m, int r)
    {
    //   n1 and n2 are size of left and right array
         int n1= m-l+1;
         int n2 = r-m;
         int left[n1],right[n2];
        //  copying element in left and right array from arr
        // and use same pattern what we did in calling mergeSort , l+i , m+1+i
         for(int i = 0;i<n1;i++){
             left[i] = arr[l+i];
         }
         for(int i = 0;i<n2;i++){
             right[i] = arr[m+1+i];
         }
        //  maintaining index variable 
        // i for left array 
        // j for right array
        // k for arr
         int i=0,j=0,k=l;
        //  comparing right and left and copying element to arr
         while(i<n1 && j<n2){
             if(left[i] <= right[j]){
                 arr[k] = left[i];
                 i++;
             }
             else{
                 arr[k] = right[j];
                 j++;
             }
             k++;
         }
        //  remaining element ,copy as it is
        while(i<n1){
            arr[k] = left[i];
            i++;
            k++;
        }
        while(j<n2){
            arr[k] = right[j];
            j++;
            k++;
        }
    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        if(l<r){
            // m is mid
            int m = l+(r-l)/2;
            mergeSort(arr,l,m);
            mergeSort(arr,m+1,r);
            merge(arr,l,m,r);
        }
    }
};



int main()
{
    int n,T,i;

    scanf("%d",&T);

    while(T--){
    
    scanf("%d",&n);
    int arr[n+1];
    for(i=0;i<n;i++)
      scanf("%d",&arr[i]);

    Solution ob;
    ob.mergeSort(arr, 0, n-1);
    printArray(arr, n);
    }
    return 0;
}  
